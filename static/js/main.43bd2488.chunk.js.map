{"version":3,"sources":["images/card_back.png","helpers/index.js","cards/index.js","game/index.js","main/index.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","shuffleArray","array","i","length","j","Math","floor","random","Cards","props","cards","click","cardsList","map","card","key","onClick","id","className","style","src","activeImage","alt","Game","useState","newCards","cardSelected","setCardSelected","isUpdate","setIsUpdate","useEffect","image","setTimeout","visibility","console","log","flipped","API","gql","Main","useQuery","loading","error","data","animalArray","topAnimals","forEach","item","push","selectedAnimals","slice","duplicateAnimalsArray","concat","lastArray","index","_id","name","toLowerCase","artwork","url","card_back","client","ApolloClient","uri","cache","InMemoryCache","App","ApolloProvider","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","message"],"mappings":"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","file":"static/js/main.43bd2488.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/card_back.521923bb.png\";","const shuffleArray = (array) => {\n    for (let i = array.length - 1; i > 0; i--) {\n      const j = Math.floor(Math.random() * (i + 1));\n      [array[i], array[j]] = [array[j], array[i]];\n    }\n  }\n\n  export default shuffleArray;","import React from 'react';\n\nimport './cards.css';\n// import card_back from '../images/card_back.png';\n\nconst Cards = (props) => {\n  const { cards, click } = props;\n  const cardsList = cards.map(card => {\n    return (\n      <div key={card.key} onClick={() => {click(card.id, card.key)}} className={\"card\"} style={card.style}>\n        <img src={card.activeImage} alt='animal' />\n        {/* <div className=\"card-name\">{card.name}</div> */}\n      </div>\n    )\n  });\n\n  return (\n    <div className='card-container'>\n      {cardsList}\n    </div>\n  )\n}\n\nexport default Cards;","import React, { useState, useEffect } from 'react';\nimport Cards from '../cards';\n\nimport './game.css';\n\nconst Game = (props) => {\n  const { cards } = props;\n  const [newCards, setNewCards] = useState(cards);\n  const [cardSelected, setCardSelected] = useState({id: null, key: null});\n  const [isUpdate, setIsUpdate] = useState(0);\n\n  useEffect(() => {}, [isUpdate] )\n\n  const handleClick = (id, key) => {\n    if (cardSelected.id !== null) {\n      if (id === cardSelected.id && key !== cardSelected.key) {\n        newCards[key].activeImage = newCards[key].image;\n        setIsUpdate(isUpdate - 1)\n        setTimeout(() => {\n          newCards[key].style = {visibility: 'hidden'}\n          newCards[cardSelected.key].style = {visibility: 'hidden'}\n          setIsUpdate(isUpdate + 2)\n        }, 1000)\n        setCardSelected({\n          id: null,\n          key: null,\n        });\n        // newCards[key].style = {visibility: 'hidden'};\n        // newCards[cardSelected.key].style = {visibility: 'hidden'};\n      } else {\n        newCards[key].activeImage = newCards[key].image\n        console.log('card is visible')\n        setTimeout(() => {\n          newCards[key].activeImage = newCards[key].flipped\n          newCards[cardSelected.key].activeImage = newCards[cardSelected.key].flipped\n          console.log(\"card is flipped back\")\n          setIsUpdate(isUpdate + 1)}, 1000)\n        console.log(isUpdate)\n        setCardSelected({\n          id: null,\n          key: null,\n        });\n      }\n    } else {\n      setCardSelected({\n        id,\n        key,\n      });\n      newCards[key].activeImage = newCards[key].image;\n    }\n  };\n\n  return (\n    <div className='container'>\n      <Cards cards={newCards} click={handleClick} />\n    </div>\n  );\n}\n\nexport default Game;","import React from 'react';\nimport { useQuery, gql } from '@apollo/client';\nimport shuffleArray from '../helpers'\nimport Game from '../game';\nimport card_back from '../images/card_back.png';\n\nimport './main.css'\n\nconst API = gql`\n  {\n    topAnimals {\n      _id\n      name\n      artwork {\n        url\n      }\n    }\n  }\n`\n\nconst Main = () => {\n\n  const { loading, error, data } = useQuery(API);\n  if (loading) return <p>Loading...</p>;\n  if (error) return <p>Error :(</p>;\n\n  const animalArray = [];\n\n  data.topAnimals.forEach((item) => (\n    animalArray.push(item)\n  ));\n  shuffleArray(animalArray);\n  \n  const selectedAnimals = animalArray.slice(0,8);\n  const duplicateAnimalsArray = selectedAnimals.concat(selectedAnimals);\n\n  shuffleArray(duplicateAnimalsArray);\n  const lastArray = duplicateAnimalsArray.map((item, index) => (\n    item = {\n      id: item._id,\n      name: item.name.toLowerCase(),\n      image: item.artwork.url,\n      flipped: card_back,\n      activeImage: card_back,\n      key: index,\n    }\n  ))\n  console.log(lastArray);\n    \n\n  return(\n    <div>\n      Night Zookeeper\n      {/* <Login /> */}\n      <Game cards={lastArray}/>\n    </div>\n  );\n}\n\nexport default Main;","import React from 'react';\nimport { ApolloProvider, ApolloClient, InMemoryCache } from '@apollo/client';\nimport Main from './main'\n\nimport './App.css';\n\nconst client = new ApolloClient ({\n  uri: 'https://graphql.nightzookeeper.com/graphql',\n  cache: new InMemoryCache()\n});\n\nfunction App() {\n  return (\n    <ApolloProvider client={client}>\n      <Main />\n    </ApolloProvider>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}