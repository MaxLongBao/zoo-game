{"version":3,"sources":["images/card_back.png","cards/index.js","game/index.js","login/index.js","navbar/index.js","endgame/index.js","helpers/index.js","main/index.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","Cards","props","cards","handleClick","cardsList","map","card","key","onClick","id","className","style","src","activeImage","alt","Game","handleEnd","useState","newCards","cardSelected","setCardSelected","update","setUpdate","cardsLeft","setCardsLeft","guesses","setGuesses","useEffect","animation","transform","transition","resetCard","console","log","setTimeout","image","visibility","flipped","Login","handleStart","name","setName","type","placeholder","onChange","e","target","value","Navbar","EndGame","shuffleArray","array","i","length","j","Math","floor","random","API_REQUEST","gql","Main","gameCards","setGameCards","endGame","setEndGame","useQuery","loading","error","data","animalArray","topAnimals","forEach","item","push","selectedAnimals","slice","duplicateAnimalsArray","concat","index","_id","toLowerCase","artwork","url","card_back","startGame","client","ApolloClient","uri","cache","InMemoryCache","App","ApolloProvider","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","message"],"mappings":"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","file":"static/js/main.a8f25182.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/card_back.521923bb.png\";","import React from 'react';\n\nimport './cards.css';\n\nconst Cards = (props) => {\n  const { cards, handleClick } = props;\n  const cardsList = cards.map(card => {\n    return (\n      <div key={card.key} onClick={() => {handleClick(card.id, card.key)}} className={\"card\"} style={card.style}>\n        <img src={card.activeImage} alt='animal' />\n      </div>\n    )\n  });\n\n  return (\n    <div className='card-container'>\n      {cardsList}\n    </div>\n  )\n}\n\nexport default Cards;","import React, { useState, useEffect } from 'react';\nimport Cards from '../cards';\n\nimport './game.css';\n\nconst Game = (props) => {\n  const { cards, handleEnd } = props;\n  const [newCards, setNewCards] = useState(cards);\n  const [cardSelected, setCardSelected] = useState({id: null, key: null});\n  const [update, setUpdate] = useState(0);\n  const [cardsLeft, setCardsLeft] = useState(16);\n  const [guesses, setGuesses] = useState(0);\n\n  useEffect(() => {}, [update] )\n\n  const animation = {\n    transform: 'rotateY(180deg)',\n    transition: 'transform 0.8s',\n  }\n  \n  const resetCard = {\n    id: null,\n    key: null,\n  };\n  \n  const handleClick = (id, key) => {\n\n      setTimeout(() => {newCards[key].activeImage = newCards[key].image\n      setUpdate(update + 1)}, 200);\n\n      newCards[key].style = animation;\n      setGuesses(guesses + 0.5);\n\n    if (cardSelected.id !== null) {\n      if (id === cardSelected.id && key !== cardSelected.key) {\n        setTimeout(() => {\n          newCards[key].style = {visibility: 'hidden'}\n          newCards[cardSelected.key].style = {visibility: 'hidden'}\n          setUpdate(update - 1)\n        }, 1000)\n        setCardsLeft(cardsLeft - 2);\n        setCardSelected(resetCard);\n      } else {\n        // console.log('card is visible')\n        setTimeout(() => {\n          newCards[key].activeImage = newCards[key].flipped\n          newCards[cardSelected.key].activeImage = newCards[cardSelected.key].flipped\n          newCards[key].style = {}\n          newCards[cardSelected.key].style = {}\n          // console.log(\"card is flipped back\")\n          setUpdate(update - 1)}, 1000)\n        console.log(update)\n        setCardSelected(resetCard);\n      }\n    } else {\n      setCardSelected({\n        id,\n        key,\n      });\n    }\n  };\n  console.log(cardsLeft)\n    if (cardsLeft === 0) {\n      setTimeout(() => handleEnd(guesses), 1000);\n    }\n    console.log(\"guesses\", guesses);\n\n   return(\n    <div className='container'>\n      <Cards cards={newCards} handleClick={handleClick} />\n    </div>\n  );\n}\n\nexport default Game;","import React, { useState } from 'react';\n\nimport './login.css';\n\nconst Login = (props) => {\n  const { handleStart } = props;\n\n  const [name, setName] = useState('');\n\n  return (\n  <div className='form-container'>\n    <div className='form-background'>\n    </div>\n    <div className='form-card'>\n      <form>\n        <div className=\"form-text\">\n          <h1>WELCOME!</h1>\n        </div>\n        <input\n          type=\"name\"\n          className=\"form-control\"\n          placeholder='Insert your name'\n          onChange={e => setName(e.target.value)}\n        />\n        <button className='form-button' onClick={() => {handleStart(name)}}>PLAY!</button>\n      </form>\n    </div>\n  </div>\n  )\n}\n\nexport default Login;","import React from 'react';\n\nimport './navbar.css';\n\nconst Navbar = (props) => {\n    const { name } = props;\n    return (\n        <div className='navbar'>\n            <div className='hidden'><h1>{name}</h1></div>\n            <div className='title'><h1>NIGHT ZOOKEEPER</h1></div>\n            <div className='name'><h1>Player: {name}</h1></div>\n        </div>\n    )\n}\n\nexport default Navbar;","import React from 'react';\n\nimport './endgame.css';\n\nconst EndGame = (props) => {\n  const { guesses } = props;\n  return (\n    <div className='endgame-container'>\n      <div className='endgame-card'>\n        <div className=\"endgame-text\">\n          <h1>GAME OVER!</h1>\n        </div>\n        <div className=\"endgame-guesses\">\n          <h1>You guessed in</h1>\n          <h1>{guesses}</h1>\n          <h1>attempts!</h1>\n        </div>\n        <button className='endgame-button' onClick={() => {console.log(\"restart\")}}>PLAY!</button>\n      </div>\n    </div>\n    )\n}\n\nexport default EndGame;","const shuffleArray = (array) => {\n    for (let i = array.length - 1; i > 0; i--) {\n      const j = Math.floor(Math.random() * (i + 1));\n      [array[i], array[j]] = [array[j], array[i]];\n    }\n  }\n\n  export default shuffleArray;","import React, { useState } from 'react';\nimport { useQuery, gql } from '@apollo/client';\nimport Game from '../game';\nimport Login from '../login';\nimport Navbar from '../navbar';\nimport EndGame from '../endgame';\nimport card_back from '../images/card_back.png';\nimport shuffleArray from '../helpers';\n\nimport './main.css';\n\nconst API_REQUEST = gql`\n  {\n    topAnimals {\n      _id\n      name\n      artwork {\n        url\n      }\n    }\n  }\n`\n\nconst Main = () => {\n  const [gameCards, setGameCards] = useState([])\n  const [name, setName] = useState('');\n  const [endGame, setEndGame] = useState(false);\n  const [guesses, setGuesses] = useState(0);\n  const { loading, error, data } = useQuery(API_REQUEST);\n  if (loading) return <p>Loading...</p>;\n  if (error) return <p>Error :(</p>;\n\n  const animalArray = [];\n\n  data.topAnimals.forEach((item) => (\n    animalArray.push(item)\n    ));\n\n  const startGame = (name) => {\n    shuffleArray(animalArray);\n    \n    const selectedAnimals = animalArray.slice(0,8);\n    const duplicateAnimalsArray = selectedAnimals.concat(selectedAnimals);\n    shuffleArray(duplicateAnimalsArray);\n    \n    setGameCards(duplicateAnimalsArray.map((item, index) => (\n      item = {\n        id: item._id,\n        name: item.name.toLowerCase(),\n        image: item.artwork.url,\n        flipped: card_back,\n        activeImage: card_back,\n        key: index,\n      }\n    )))\n    setName(name)\n  }\n\n  const handleStart = (name) => {\n    startGame(name)\n  }\n\n  const handleEnd = (guesses) => {\n    setGuesses(guesses);\n    setEndGame(true);\n  }\n\n  return(\n    <div className='main-container'>\n      <Navbar name={name} />\n      { name === ''\n      ? <Login handleStart={handleStart}/>\n      : <Game cards={gameCards} handleEnd={handleEnd} /> }\n      { endGame ? <EndGame guesses={guesses}/> : null }\n    </div>\n  );\n}\n\nexport default Main;","import React from 'react';\nimport { ApolloProvider, ApolloClient, InMemoryCache } from '@apollo/client';\nimport Main from './main'\n\nimport './App.css';\n\nconst client = new ApolloClient ({\n  uri: 'https://graphql.nightzookeeper.com/graphql',\n  cache: new InMemoryCache()\n});\n\nfunction App() {\n  return (\n    <ApolloProvider client={client}>\n      <Main />\n    </ApolloProvider>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}